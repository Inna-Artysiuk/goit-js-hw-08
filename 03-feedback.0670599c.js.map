{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAOC,SAASC,cAAc,kBAC9BC,EAAQF,SAASC,cAAc,uBAC/BE,EAAUH,SAASC,cAAc,4BACjCG,EAAmB,sBAGCL,EAArBM,iBACH,SACA,EAAAR,EAAAS,WAAS,SAAAC,GAEgD,IAAjDC,EAAe,CAAEC,MAAOP,EAAMQ,MAAOC,QAASR,EAAQO,OAI3BE,aAApBC,QAAQT,EAAkBU,KAAKC,UAAUP,G,GACrD,MAIqBT,EAArBM,iBAAiB,UAAU,SAAAE,GAIE,GAHhCA,EAAES,iBAGkB,KAAhBd,EAAMQ,OAAkC,KAAlBP,EAAQO,MAChC,OAAOO,MAAM,uBAI0CC,QAAjDC,IAAI,CAAEV,MAAOP,EAAMQ,MAAOC,QAASR,EAAQO,QAEnDX,EAAKqB,QACYR,aAAJS,WAAWjB,E,IAImC,IAavDkB,EAbO,SAAAC,GACX,IACE,IAAMC,EAAkBZ,aAAaa,QAAQF,GAGI,OAAtB,OAApBC,OAA2BE,EAAYZ,KAAKa,MAAMH,E,CACzD,MAAOI,GAE0BV,QAAzBU,MAAM,oBAAqBA,EAAMjB,Q,EAKzBkB,CAAKzB,GAIrBkB,IACFpB,EAAMQ,MAAQY,EAAYb,MAC1BN,EAAQO,MAAQY,EAAYX,Q","sources":["src/js/03-feedback.js"],"sourcesContent":["import { throttle } from 'lodash';\n\n// Пошук елементів на сторінці\nconst form = document.querySelector('.feedback-form');\nconst email = document.querySelector('input[name=\"email\"]');\nconst message = document.querySelector('textarea[name=\"message\"]');\nconst LOCALSTORAGE_KEY = 'feedback-form-state'; // Ключ для сховища\n\n// Додаємо слухача події input до форми\nform.addEventListener(\n  'input',\n  throttle(e => {\n    // Об'єкт з полями email і message, у яких зберігаються поточні значення полів форми\n    const objectToSave = { email: email.value, message: message.value };\n\n    // Записування у локальне сховище об'єкта з полями.\n    // JSON.stringify - конвертування JS-значень у формат строки JSON.\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(objectToSave));\n  }, 500) // Оновлення сховища раз на 500 мілісекунд\n);\n\n// Додаємо слухача події submit до форми\nform.addEventListener('submit', e => {\n  e.preventDefault(); // відміна оновлення сторінки\n\n  // Перевірка чи заповнені всі поля форми\n  if (email.value === '' || message.value === '') {\n    return alert('Заповніть всі поля!');\n  }\n\n  // Виведення у консоль об'єкта з полями та їхніми поточними значеннями\n  console.log({ email: email.value, message: message.value });\n\n  form.reset(); // очищення поля форми\n  localStorage.removeItem(LOCALSTORAGE_KEY); // очищення сховища\n});\n\n// Метод load який буде абстрагувати повторюваний код перевірки помилок парса\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key); // ключ елемента сховища\n\n    // Якщо елемента немає - повернути undefined, інакше розпарсити елемент.\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    // В разі помилки повернути повідомлення\n    console.error('Get state error: ', error.message);\n  }\n};\n\n// Присвоєння ключа до сховища через метод load\nconst storageData = load(LOCALSTORAGE_KEY);\n\n// Перевірка стану сховища.\n// Якщо  в сховищі є збережені дані - заповнити ними поля форми.\nif (storageData) {\n  email.value = storageData.email;\n  message.value = storageData.message;\n} // В іншому випадку поля будуть порожніми\n"],"names":["$1WSnx","parcelRequire","$b00c40859be242c5$var$form","document","querySelector","$b00c40859be242c5$var$email","$b00c40859be242c5$var$message","$b00c40859be242c5$var$LOCALSTORAGE_KEY","addEventListener","throttle","e","objectToSave","email","value","message","localStorage","setItem","JSON","stringify","preventDefault","alert","console","log","reset","removeItem","$b00c40859be242c5$var$storageData","key","serializedState","getItem","undefined","parse","error","$b00c40859be242c5$var$load"],"version":3,"file":"03-feedback.0670599c.js.map"}